import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'Api.dart';

class Appointment extends StatefulWidget {
  Appointment({Key? key}) : super(key: key);

  @override
  State<Appointment> createState() => _AppointmentState();
}

class _AppointmentState extends State<Appointment> {
  late Future<List<Reservation>> futureAppointments;
  List<Reservation> filteredReservations = [];
  List<Reservation> reservations = [];
  List<String> suggestions = [];
  TextEditingController searchController = TextEditingController();
  
  @override
  void initState() {
    super.initState();
    futureAppointments = fetchAppointments();
    searchController.addListener(filterReservations);
  }

  @override
  void dispose() {
    searchController.dispose();
    super.dispose();
  }

  Future<List<Reservation>> fetchAppointments() async {
    try {
      final reservations = await ApiProvider.fetchReservations();
      setState(() {
        this.reservations = reservations;
        filteredReservations =
            reservations; // Initialize filtered list with all reservations
      });
      return reservations;
    } catch (e) {
      print('Error in fetch: $e');
      throw Exception('Failed to fetch appointments');
    }
  }

  void filterReservations() {
    String query = searchController.text.toLowerCase();
    List<Reservation> filteredList = reservations
        .where(
          (reservation) =>
              reservation.patientName.toLowerCase().contains(query),
        )
        .toList();
    List<String> suggestedNames =
        filteredList.map((res) => res.patientName).toList();

    setState(() {
      filteredReservations = filteredList;
      suggestions = suggestedNames;
    });
  }

  void _selectSuggestion(String suggestion) {
    setState(() {
      searchController.text = suggestion;
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        // When tapping on the screen, hide the suggestions and close the keyboard
        FocusScope.of(context).unfocus(); // Close the keyboard
        setState(() {
          suggestions = []; // Hide the suggestions list
        });
      },
      child: MaterialApp(
        title: 'Appointment',
        home: ScaffoldMessenger(
          child: Scaffold(
            appBar: AppBar(
              title: const Text("Appointments"),
            ),
            body: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: TextField(
                    controller: searchController,
                    onChanged: (value) => filterReservations(),
                    decoration: InputDecoration(
                      labelText: "Search by patient name",
                      prefixIcon: Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(25),
                      ),
                    ),
                  ),
                ),
                if (suggestions.isNotEmpty)
                  Expanded(
                    child: ListView.builder(
                      itemCount: suggestions.length,
                      itemBuilder: (context, index) {
                        final suggestion = suggestions[index];
                        return ListTile(
                          title: Text(suggestion),
                          onTap: () => _selectSuggestion(suggestion),
                        );
                      },
                    ),
                  ),
                Expanded(
                  child: filteredReservations.isEmpty
                      ? Center(
                          child: Text(
                            'Not Found',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        )
                      : FutureBuilder<List<Reservation>>(
                          future: futureAppointments,
                          builder: (context, snapshot) {
                            if (snapshot.connectionState ==
                                ConnectionState.waiting) {
                              return Center(
                                child: CircularProgressIndicator(),
                              );
                            } else if (snapshot.hasError) {
                              return Center(
                                child: Text('Error: ${snapshot.error}'),
                              );
                            } else {
                              reservations = snapshot.data ?? [];
                              if (reservations.isEmpty &&
                                  filteredReservations.isEmpty) {
                                return Center(
                                  child: Text(
                                    'Not Found',
                                    style: TextStyle(
                                      fontSize: 18,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                );
                              }
                              return ListView.builder(
                                itemCount: reservations.length,
                                itemBuilder: (context, index) {
                                  final appointment = reservations[index];
                                  return Padding(
                                    padding: const EdgeInsets.all(15.0),
                                    child: Container(
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(25),
                                        boxShadow: [
                                          BoxShadow(
                                            color: Colors.cyan,
                                            blurRadius: 8,
                                            spreadRadius: 7,
                                          ),
                                        ],
                                      ),
                                      child: Padding(
                                        padding: const EdgeInsets.all(15.0),
                                        child: Column(
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                Icon(CupertinoIcons
                                                    .profile_circled),
                                                SizedBox(width: 5),
                                                Text(
                                                  "Patient Name:",
                                                  style: TextStyle(
                                                    color: Colors.cyan,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(width: 5),
                                                Text(
                                                  "${appointment.patientName}",
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.w900,
                                                    color: CupertinoColors
                                                        .darkBackgroundGray,
                                                  ),
                                                ),
                                                SizedBox(height: 50),
                                              ],
                                            ),
                                            Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                Icon(Icons.numbers),
                                                SizedBox(width: 5),
                                                Text(
                                                  "Age:",
                                                  style: TextStyle(
                                                    color: Colors.cyan,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(width: 5),
                                                Text(
                                                  "${appointment.age}",
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.w900,
                                                    color: CupertinoColors
                                                        .darkBackgroundGray,
                                                  ),
                                                ),
                                                SizedBox(height: 50),
                                              ],
                                            ),
                                            Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                Icon(Icons.watch_later),
                                                SizedBox(width: 5),
                                                Text(
                                                  "Appointment Date:",
                                                  style: TextStyle(
                                                    color: Colors.cyan,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(width: 5),
                                                Text(
                                                  "${appointment.appointmentStart}",
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.w900,
                                                    color: CupertinoColors
                                                        .darkBackgroundGray,
                                                  ),
                                                ),
                                                SizedBox(height: 50),
                                              ],
                                            ),
                                            Row(
                                              children: [
                                                Icon(Icons
                                                    .meeting_room_outlined),
                                                SizedBox(width: 5),
                                                Text(
                                                  "Room:",
                                                  style: TextStyle(
                                                    color: Colors.cyan,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(width: 5),
                                                Text(
                                                  "${appointment.roomNumber}",
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.w900,
                                                    color: CupertinoColors
                                                        .darkBackgroundGray,
                                                  ),
                                                ),
                                                SizedBox(height: 50),
                                              ],
                                            ),
                                            Row(
                                              children: [
                                                Icon(Icons.chair),
                                                SizedBox(width: 5),
                                                Text(
                                                  "Chair:",
                                                  style: TextStyle(
                                                    color: Colors.cyan,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(width: 5),
                                                Text(
                                                  "${appointment.chairNumber}",
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.w900,
                                                    color: CupertinoColors
                                                        .darkBackgroundGray,
                                                  ),
                                                ),
                                                SizedBox(height: 50),
                                              ],
                                            ),
                                            Row(
                                              mainAxisSize: MainAxisSize.min,
                                              children: [
                                                Padding(
                                                  padding:
                                                      const EdgeInsets.only(
                                                          left: 20.0,
                                                          top: 10.0),
                                                  child: TextButton(
                                                    style: TextButton.styleFrom(
                                                      textStyle: TextStyle(
                                                        color: Colors.red,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                    onPressed: () {
                                                      showDialog(
                                                        context: context,
                                                        builder: (context) {
                                                          return AlertDialog(
                                                            actions: [
                                                              TextButton(
                                                                onPressed:
                                                                    () async {
                                                                  Navigator.of(
                                                                          context)
                                                                      .pop();
                                                                  try {
                                                                    await ApiProvider.cancelAppointment(
                                                                        appointment
                                                                            .id);
                                                                    setState(
                                                                        () {
                                                                      // Optionally, you can update the appointments list to reflect the canceled appointment
                                                                      futureAppointments =
                                                                          fetchAppointments();
                                                                    });
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                            SnackBar(
                                                                      content:
                                                                          const Text(
                                                                              'Appointment canceled successfully'),
                                                                      duration: const Duration(
                                                                          seconds:
                                                                              2),
                                                                      behavior:
                                                                          SnackBarBehavior
                                                                              .floating,
                                                                      shape:
                                                                          RoundedRectangleBorder(
                                                                        borderRadius:
                                                                            BorderRadius.circular(20),
                                                                      ),
                                                                    ));
                                                                  } catch (e) {
                                                                    ScaffoldMessenger.of(
                                                                            context)
                                                                        .showSnackBar(
                                                                            SnackBar(
                                                                      content:
                                                                          const Text(
                                                                              'Failed to cancel appointment'),
                                                                      duration: const Duration(
                                                                          seconds:
                                                                              2),
                                                                      behavior:
                                                                          SnackBarBehavior
                                                                              .floating,
                                                                      shape:
                                                                          RoundedRectangleBorder(
                                                                        borderRadius:
                                                                            BorderRadius.circular(20),
                                                                      ),
                                                                    ));
                                                                  } // Close the dialog

                                                                  // Call the cancelAppointment method with the appointment id
                                                                },
                                                                child:
                                                                    Text("Yes"),
                                                              ),
                                                              TextButton(
                                                                onPressed: () =>
                                                                    Navigator.pop(
                                                                        context,
                                                                        "No"),
                                                                child:
                                                                    Text("No"),
                                                              ),
                                                            ],
                                                            title: Text(
                                                                "Canceling Appointment"),
                                                            content: Text(
                                                                "Do you want to cancel this appointment?"),
                                                          );
                                                        },
                                                      );
                                                    },
                                                    child: const Text(
                                                      "Cancel",
                                                      style: TextStyle(
                                                        color: Colors.red,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  );
                                },
                              );
                            }
                          },
                        ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
import 'dart:convert';
import 'package:http/http.dart' as http;

const String baseUrl = 'https://timeengcom.com/dentist';

class Reservation {
  final String patientName;
  final int age;
  final String appointmentStart;
  final int roomNumber;
  final int chairNumber;
  final int id;

  Reservation(
      {required this.patientName,
      required this.age,
      required this.appointmentStart,
      required this.roomNumber,
      required this.chairNumber,
      required this.id});

  factory Reservation.fromJson(Map<String, dynamic> json) {
  final appointmentData = json['appointment'];
  final patientFirstName = appointmentData['patient']['first_name'] as String? ?? '';
  final patientLastName = appointmentData['patient']['last_name'] as String? ?? '';

  final start = json['start'];
  final startDateTime = start != null ? DateTime.parse(start) : null;
  final appointmentStart = startDateTime != null
      ? '${startDateTime.year}-${startDateTime.month}-${startDateTime.day}'
      : '';

  return Reservation(
    id: json['appointment']['id'] as int,
    patientName: '$patientFirstName $patientLastName',
   age: calculateAge(appointmentData['patient']['birthdate'] as String?) ?? 0,

    appointmentStart: appointmentStart,
    roomNumber: json['chair']['room_id'] as int? ?? 0,
    chairNumber: json['chair']['number'] as int? ?? 0,
  );
}


  static int? calculateAge(String? birthdate) {
  if (birthdate == null) return null;

  final now = DateTime.now();
  final date = DateTime.parse(birthdate);
  print('the age');
  print(now.difference(date).inDays ~/ 365);
  return now.difference(date).inDays ~/ 365;
}


  bool contains(String query) {
    final lowerCaseQuery = query.toLowerCase();
    final fullName = patientName.toLowerCase();
    final formattedDate = appointmentStart.split("T")[0].toLowerCase();
    return fullName.contains(lowerCaseQuery) ||
        formattedDate.contains(lowerCaseQuery);
  }
}

class ApiProvider {
  static Future<void> cancelAppointment(int appointmentId) async {
    try {
      final url = '$baseUrl/user/cancel-reservation';
      final headers = {'Content-Type': 'application/json'};
      final body = jsonEncode({'appointment_reservation_id': appointmentId});

      final response =
          await http.post(Uri.parse(url), headers: headers, body: body);

      if (response.statusCode == 200) {
        print('Appointment canceled successfully!');
      } else {
        print(
            'Failed to cancel appointment. Status code: ${response.statusCode}');
      }
    } catch (e) {
      print('Error canceling appointment: $e');
    }
  }

  static Future<List<Reservation>> fetchReservations() async {
    const url = '$baseUrl/appointment/future-reservation/5';

    final response = await http.get(Uri.parse(url));
    if (response.statusCode == 200) {
      final data = jsonDecode(response.body) as Map<String, dynamic>;
      final reservationsData = data['data'] as List<dynamic>;

      final reservations =
          reservationsData.map((json) => Reservation.fromJson(json)).toList();
      // ignore: avoid_print
      print('Response: $reservations'); // *Print the response
      return reservations;
    } else {
      throw Exception('Failed to fetch reservations');
    }
  }
}
